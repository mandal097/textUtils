{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/About.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onClick","toggleMode","style","height","width","cursor","htmlfor","defaultProps","Alert","alert","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","About","myStyle","color","backgroundColor","border","borderColor","classNameName","TextForm","useState","text","setText","borderRadius","heading","value","onChange","event","target","rows","disabled","length","newText","showAlert","console","log","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","join","filter","element","App","switchMode","setSwitchMode","setMode","setAlert","message","setTimeout","cls","body","classList","add","remove","export","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f10ea83e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n          <buthrefn className=\"navbar-hrefggler\" type=\"buthrefn\" data-bs-hrefggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"hrefggle navigation\">\r\n            <span className=\"navbar-hrefggler-icon\"></span>\r\n          </buthrefn>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auhref mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link \" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link \" to=\"/about\" >{props.aboutText}</Link>\r\n              </li>\r\n            </ul>\r\n\r\n          </div>\r\n          <div className=\"d-flex\">\r\n            <div className=\"bg-primary rounded mx-2\" onClick={() => { props.toggleMode('primary') }} style={{ height: \"20px\", width: \"20px\", cursor: 'pointer' }}></div>\r\n            <div className=\"bg-secondary rounded mx-2\" onClick={() => { props.toggleMode('secondary') }} style={{ height: \"20px\", width: \"20px\", cursor: 'pointer' }}></div>\r\n            <div className=\"bg-warning rounded mx-2\" onClick={() => { props.toggleMode('warning') }} style={{ height: \"20px\", width: \"20px\", cursor: 'pointer' }}></div>\r\n            <div className=\"bg-success rounded mx-2\" onClick={() => { props.toggleMode('success') }} style={{ height: \"20px\", width: \"20px\", cursor: 'pointer' }}></div>\r\n            <div className=\"bg-danger rounded mx-2\" onClick={() => { props.toggleMode('danger') }} style={{ height: \"20px\", width: \"20px\", cursor: 'pointer' }}></div>\r\n          </div>\r\n\r\n\r\n          <div className={`form-check form-switch text-${props.mode === 'light' ? \"dark\" : 'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={() => { props.toggleMode() }} />\r\n            <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">{props.toggleMode}</label>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string\r\n\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"textUtils\",\r\n  aboutText: \"about us\"\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1)\r\n    }\r\n    return (\r\n        <div style={{height:'50px'}}>\r\n{    props.alert &&\r\n    <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{ capitalize(props.alert.type)}</strong> {props.alert.msg}\r\n    </div>}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import React, { useState } from 'react'\r\n\r\nexport default function About(props) {\r\n    \r\n    // const [myStyle, setMystyle] = useState({\r\n    //         color: 'black',\r\n    //         backgroundColor:'white'\r\n    // })\r\n    let myStyle = {\r\n        color : props.mode === 'dark' ? 'white' : 'black',\r\n        backgroundColor: props.mode === 'dark'?'#042743':'white',\r\n        border : '2px solid',\r\n        borderColor:  props.mode === 'dark'?'#042743':'white'\r\n    }\r\n\r\n\r\n    return (\r\n            <div classNameName=\"container\" style={myStyle}>\r\n                <h1 className=\"my-3\">About Us</h1>\r\n                <div className=\"accordion mx-2\" id=\"accordionExample\">\r\n    <div className=\"accordion-item \">\r\n        <h2 className=\"accordion-header\" id=\"headingOne\">\r\n        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\" style={myStyle}>\r\n            Accordion Item #1\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-body\">\r\n            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n        </div>\r\n        </div>\r\n    </div>\r\n    <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\" style={myStyle}>\r\n            Accordion Item #2\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n        <div className=\"accordion-body\" style={myStyle}>\r\n            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n        </div>\r\n        </div>\r\n    </div>\r\n    <div className=\"accordion-item\">\r\n        <h2 className=\"accordion-header\" id=\"headingThree\">\r\n        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\" style={myStyle}>\r\n            Accordion Item #3\r\n        </button>\r\n        </h2>\r\n        <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\" style={myStyle}>\r\n        <div className=\"accordion-body\">\r\n            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n        </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n    {/* <div className=\"container my-3 p-2\">\r\n\r\n    <button className=\"btn btn-light\" style={btnColor} onClick={toggleStyle}>{btnText}</button>\r\n    </div> */}\r\n            </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    // setText(new text\r\n    const handleUpClick = () => {\r\n        // console.log('uppercase was clicked')\r\n        let newText = text.toUpperCase()\r\n        props.showAlert('converted to uppercase', 'success')\r\n        setText(newText)\r\n        // document.getElementsById('')\r\n        // setText('newText')\r\n    }\r\n    const handleLoClick = () => {\r\n        // console.log('uppercase was clicked')\r\n        let newText = text.toLowerCase()\r\n        setText(newText)\r\n        props.showAlert('converted to lowercase', 'success')\r\n        // setText('newText')\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        // console.log('uppercase was clicked')\r\n        let newText = ''\r\n        setText(newText)\r\n        props.showAlert('text has been cleared', 'success')\r\n        // setText('newText')\r\n    }\r\n    const handleCopy = () => {\r\n        console.log('copy to clipboard')\r\n        var text = document.getElementById('MyBox')\r\n        text.select()\r\n        navigator.clipboard.writeText(text.value)\r\n        document.getSelection().removeAllRanges()\r\n        props.showAlert('copied to clipboard', 'success')\r\n        \r\n    }\r\n    const handleTrim = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert('text has been trimed haha', 'success')\r\n\r\n    }\r\n\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"on change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState(' ')\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container mb-3\" style={{ backgroundColor: props.mode === 'dark' ? \"grey\" : 'white', color: props.mode === 'dark' ? \"#042743\" : \"black\", borderRadius: 10 + 'px' }}>\r\n                <h2 className='my-2' style={{ color: props.mode === 'dark' ? \"white\" : \"black\" }}>{props.heading}</h2>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} style={{ backgroundColor: props.mode === 'dark' ? \"#042743\" : 'white', color: props.mode === 'dark' ? \"white\" : \"black\" }} onChange={handleOnChange} id=\"MyBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mb-2 mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-2 mb-2\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-2 mb-2\" onClick={handleClearClick}>Clear</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary  mx-2 mb-2\" onClick={handleCopy}>copy to clipboard</button>\r\n                <button disabled={text.length === 0} className=\"btn btn-primary mx-2 mb-2 \" onClick={handleTrim}>remove extra spaces</button>\r\n\r\n\r\n            </div>\r\n            <div className=\"container\" style={{ color: props.mode === 'dark' ? \"white\" : \"black\" }}>\r\n                <h1>Your Text summary</h1>\r\n                <p>{text.split(/\\s+/).filter((element) => { return element.length !== 0 }).length} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n                <h2>preview</h2>\r\n                <p>{text.length > 0 ? text : 'Nothing to preview'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n\n} from \"react-router-dom\";\n\n\n\n\nfunction App() {\n  const [switchMode,setSwitchMode]= useState('enable dark mode')\n  const [mode,setMode] = useState('light')\n  const [alert,setAlert]= useState(null)\n  \n  const showAlert= (message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n  const removeBodyClasses = ()=>{\n    document.body.classList.remove('bg-light')\n    document.body.classList.remove('bg-dark')\n    document.body.classList.remove('bg-warning')\n    document.body.classList.remove('bg-danger')\n    document.body.classList.remove('bg-success')\n    document.body.classList.remove('bg-secondary')\n  }\n\n  const toggleMode =(cls)=>{\n    document.body.classList.add('bg-'+cls)\n    removeBodyClasses()\n    if(mode==='light'){\n      setMode('dark')\n      document.body.style.backgroundColor = '#042743'\n      setSwitchMode('enable light mode')\n    showAlert('dark mode has been enabled','success')\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = 'white'\n      setSwitchMode('enable dark mode')\n      showAlert('light mode has been enabled','success')\n      // document.title = 'textUtils'\n    }\n\n  }\n \n  return (\n    <>\n   <Router>\n<Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} switchMode={switchMode} />\n<Alert alert={alert}/>\n  <div className=\"container my-3\">\n  <Switch>\n          <Route export path=\"/about\">\n          <About mode={mode} />\n          </Route>\n          <Route export  path=\"/\">\n    <TextForm showAlert={showAlert} heading =\"Try textUtils - Word counter | character counter | remove extra spaces\" mode={mode} />\n          </Route>\n    </Switch>\n</div>\n</Router>\n</>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}